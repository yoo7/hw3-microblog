{{! Partial for a single post }}
<div class="post">
    <div class="post-avatar">
        <!-- Conditional rendering based on variables copied this code from main.handlebars-->
        <img src="{{#if this.avatar_url}}
                        {{this.avatar_url}}
                    {{else}}
                        /images/{{this.username}}
                    {{/if}}" 
                    alt="User Avatar" 
                    class="header-avatar">
        
        <span class="title gaegu-regular bold">{{this.title}}</span>
    </div>
    <div class="post-content">
        <span class="content gaegu-class">{{this.content}}</span>
        <!-- the post -->
        <div class="post-status-bar">
           <!-- Determine whether to show like button OR the trashcan depending on the user-->
            {{#ifCond this.username user.username}}
                <div class="delete">
                    <button type="button" data-id={{this.id}} class="trash" onclick="handleDeleteClick(event)">üóëÔ∏è</button>
                    <div class="num-likes">
                        <p>{{this.likes}} likes</p>
                    </div>
                </div>
            {{else}}
                <div class="likes">
                    <button type="button" data-id={{this.id}} class="heart" onclick="handleLikeClick(event)">‚ô°</button>
                    <div class="num-likes">
                        <p>{{this.likes}} likes</p>
                    </div>
                </div>
            {{/ifCond}}
            

            <!-- font awesome  trashcan = <i class="fas fa-trash-alt"> </i>-->

            <div class="timestamp">Noted at {{this.timestamp}} by {{this.username}}</div>
        </div>        
    </div>
</div>
<script>

    function handleLikeClick(event) {
        event.preventDefault();

        const postId = event.target.getAttribute("data-id");
        let likeUp = (event.target.textContent === "‚ô°");
  
        fetch("/like/" + postId, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: `likeUp=${encodeURIComponent(likeUp)}`
        })
        .then(res => res.text())
        .then(text => {
            const numLikes = parseInt(text);

            // User was logged in, so we got some # other than NaN
            // Allow the likes to actually get updated on the DOM
            if (!isNaN(numLikes)) {
                event.target.nextElementSibling.textContent = numLikes + " likes";

                if (likeUp) {
                    // Like the post
                    event.target.textContent = "‚ô•";
                } else {
                    // Unlike the post
                    event.target.textContent = "‚ô°";
                }
            }
        })
        .catch(error => console.error("Error:", error));     
    }

    function handleDeleteClick(event) {
        const buttonElement = event.target.closest(".delete-button");
        const postId = buttonElement.getAttribute("data-id");        

        fetch("/delete/" + postId, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: "userAnswer=${encodeURIComponent(userAnswer)}"  // TODO change the body
        })
        .then(response => response.text())
        .catch(error => console.error('Error:', error));    
    }    
</script>