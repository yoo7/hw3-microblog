{{! Partial for a single post }}
<div class="post">
    <div class="post-avatar">
        <!-- TODO conditional rendering based on variables copied this code from main.handlebars-->
        <img src="{{#if user.avatar_url}}
                        {{user.avatar_url}}
                    {{else}}
                        /avatar/{{user.username}}
                    {{/if}}" 
                    alt="User Avatar" 
                    class="header-avatar">
        
        <span class="title gaegu-class">{{this.title}}</span>
    </div>
    <div class="post-content preserve-newlines">
        <span class="content gaegu-class">{{this.content}}</span>
        <!-- the post -->
        <div class="post-status-bar">
            {{this.likes}}
            Stuck on the board at {{this.timestamp}} by {{this.username}}
            <!-- TODO determine whether to show post + likes OR the trashcan depending on the user-->
            <!-- everything that is shown in the status bar -->
            <!-- Heart = â™¥ -->
            <!-- font awesome  trashcan = <i class="fas fa-trash-alt"> </i>-->
        </div>        
    </div>
</div>
<script>
    // TODO need to add eventListeners??

    function handleLikeClick(event) {
        event.preventDefault();
        const postId = event.target.getAttribute("data-id");

        // TODO: Consider updatePostLikes() in server.js, which is called by app.post("/like/:id"...) thing
        // TODO you might want to "fetch" something...   
        fetch("/like/" + postId, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: "userAnswer=${encodeURIComponent(userAnswer)}"  // TODO not sure what to do for body (taken from tutorial)
        })
        .then(response => response.text())
        .catch(error => console.error('Error:', error));     
    }

    function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.delete-button');
        const postId = buttonElement.getAttribute('data-id');        

        // TODO you might want to "fetch" something...   
        fetch("/delete/" + postId, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: "userAnswer=${encodeURIComponent(userAnswer)}"  // TODO not sure what to do for body (taken from tutorial)
        })
        .then(response => response.text())
        .catch(error => console.error('Error:', error));    
    }    
</script>