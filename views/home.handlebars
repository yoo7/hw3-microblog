{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container gaegu-regular">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <form action="/posts" method="POST">
                <input class="gaegu-regular" type="text" id="title" name="title" required=true placeholder="Title"/>

                <textarea class="gaegu-regular" id="content" name="content" required=true placeholder="What's happening?"></textarea>

                <div id="checkbox">
                    <input class="gaegu-regular" type="checkbox" id="timer-toggle" name="schedule" onclick="toggleSchedule()"/>
                    <label for="timer-toggle">Schedule delete</label>
                </div>

                <div id="timer">
                    <label for="auto-delete">Delete on:</label>
                    <input type="datetime-local" id="auto-delete" name="deleteDate" required=false class="gaegu-regular"/>
                </div>

                <div class="form-actions">
                    <button type="button" class="gaegu-regular" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="submit" class="gaegu-regular">POST</button>
                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <!-- input field for the emoji search -->
                <input class="gaegu-regular" type="search" id="emoji-search" name="search" placeholder="Search for an emoji" oninput="searchEmojis()"/>

                <div id="emoji-grid">

                </div>
            </div>
        </section>
    {{/if}}

    <section class="posts-list">
        <!-- recent posts -->
        <h2>&mdash; {{postNeoType}}s from {{postNeoType}}-Takers &mdash;</h2>

        <button type="button" id="dropdown" class="gaegu-regular" onclick="toggleDropdown()">Sort Posts</button>
        <ul class="options">
            <li id="recent">Recent</li>
            <li id="oldest">Oldest</li>
            <li id="most-liked">Most Liked</li>
            <li id="least-liked">Least Liked</li>
        </ul>

        <div class="show-posts">
            {{#if posts.length}}
            <ul>
                {{#each posts}}
                    <!-- you have to pass the user in to posts and this is the syntax -->
                    {{> post this currentUser=../currentUser}}            
                {{/each}}
            </ul>
            {{else}}
                <p>No recent {{toLowerCase postNeoType}}s taken...</p>
            {{/if}}
        </div>
    </section>
</section>


<script>
    

    setSortSelection();

    function setMinTime() {
        // Earliest date is the current time
        const currTime = new Date();
        currTime.setMinutes(currTime.getMinutes() - currTime.getTimezoneOffset());
        document.getElementById("auto-delete").min = currTime.toISOString().slice(0,16);
    }

    function setSortSelection() {
        const recent = document.getElementById("recent");
        const oldest = document.getElementById("oldest");
        const mostLiked = document.getElementById("most-liked");
        const leastLiked = document.getElementById("least-liked");

        recent.addEventListener("click", changeSort);
        oldest.addEventListener("click", changeSort);
        mostLiked.addEventListener("click", changeSort);
        leastLiked.addEventListener("click", changeSort);

        // Determine sortType based on query parameters of current URL
        let sortType = window.location.search.split("?")

        // Extract the source type from the query parameters
        if (sortType && sortType.length > 1) {
            sortType = sortType[1].split("=")[1];
        }

        let newSelected = null;

        if (sortType.length <= 1 || sortType === "recent") {
            newSelected = document.getElementById("recent");
        } else {
            newSelected = document.getElementById(sortType);
        }

        // Is valid sort type
        if (newSelected) {
            newSelected.classList.add("selected");
        }
    }

    function changeSort(event) {
        // No posts anyway
        if (document.getElementsByClassName("show-posts").length === 0) {
            return;
        }
        const newSelected = event.target;

        if (newSelected.classList.contains("selected")) {
            // Already using this filter
            return;
        }

        // Reload page with the newly sorted posts
        window.location.href = "/?sort=" + newSelected.id;
    }

    function toggleSchedule() {
        const timer = document.getElementById("timer");
        const schedule = document.getElementById("auto-delete");

        timer.style.display = timer.style.display !== "grid" ? "grid" : "none";

        if (timer.style.display === "grid") {
            setMinTime();
            schedule.setAttribute("required", "true");
        } else {
            schedule.setAttribute("required", "false");
        }
    }

</script>